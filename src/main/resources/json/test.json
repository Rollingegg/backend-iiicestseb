{"title": "Balancing Soundness and Efficiency for Practical Testing of Configurable Systems", "authors": [{"name": "Sabrina Souto", "affiliation": "State Univ. of Paraiba, Para\u00edba, Brazil", "firstName": "Sabrina", "lastName": "Souto", "id": "37086185515"}, {"name": "Marcelo D'Amorim", "affiliation": "Fed. Univ. of Pernambuco, Recife, Brazil", "firstName": "Marcelo", "lastName": "D'Amorim", "id": "37831778900"}, {"name": "Rohit Gheyi", "affiliation": "Fed. Univ. of Campina Grande, Campina Grande, Brazil", "firstName": "Rohit", "lastName": "Gheyi", "id": "37391828700"}], "abstract": "Testing configurable systems is important and challenging due to the enormous space of configurations where errors can hide. Existing approaches to test these systems are often costly or unreliable. This paper proposes S-SPLat, a technique that combines heuristic sampling with symbolic search to obtain both breadth and depth in the exploration of the configuration space. S-SPLat builds on SPLat, our previously developed technique, that explores all reachable configurations from tests. In contrast to its predecessor, S-SPLat sacrifices soundness in favor of efficiency. We evaluated our technique on eight software product lines of various sizes and on a large configurable system - GCC. Considering the results for GCC, S-SPLat was able to reproduce all five bugs that we previously found in a previous study with SPLat but much faster and it was able to find two new bugs in a recent release of GCC. Results suggest that it is preferable to use a combination of simple heuristics to drive the symbolic search as opposed to a single heuristic. S-SPLat and our experimental infrastructure are publicly available.", "keywords": [{"type": "IEEE Keywords", "kwd": ["Testing", "Computer bugs", "Software product lines", "Complexity theory", "Reliability", "Space exploration"]}, {"type": "INSPEC: Controlled Indexing", "kwd": ["program testing", "software product lines"]}, {"type": "INSPEC: Non-Controlled Indexing", "kwd": ["configurable system testing", "S-SPLat technique", "heuristic sampling", "symbolic search", "configuration space", "software product lines", "GCC"]}, {"type": "Author Keywords ", "kwd": ["sampling", "testing", "configuration"]}], "publication": "2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE)", "doi": "10.1109/ICSE.2017.64", "ref": [{"order": "1", "text": "<em>Configuration error brings down the Azure cloud platform</em>,  [online]  Available: http://www.evolven.com/blog/configuration-error-brings-down-the-azure-cloud-platform.html.", "title": "Configuration error brings down the Azure cloud platform", "context": [{"sec": "sec1", "text": " Some of these errors have been widely publicized in the media given the volume of users or data they affected [1], [3], [23].", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=Configuration+error+brings+down+the+Azure+cloud+platform&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref1"}, {"order": "2", "text": "<em>DejaGnu</em>,  [online]  Available: http://www.gnu.org/software/dejagnu/.", "title": "DejaGnu", "context": [{"sec": "sec5b1a", "text": "GCC uses DejaGnu [2] as testing framework.", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=DejaGnu&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref2"}, {"order": "3", "text": "<em>DNS misconfiguration</em>,  [online]  Available: http://www.circleid.com/posts/misconfiguration_brings_down_entire_se_domain_in_sweden.", "title": "DNS misconfiguration", "context": [{"sec": "sec1", "text": " Some of these errors have been widely publicized in the media given the volume of users or data they affected [1], [3], [23].", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=DNS+misconfiguration&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref3"}, {"order": "4", "text": "<em>Firefox web browser</em>,  [online]  Available: http://hg.mozilla.org.", "title": "Firefox web browser", "context": [{"sec": "sec1", "text": " The Firefox web browser [4], the Linux kernel [9], the GCC compiler infrastructure [5], and the deals-recommendation web service Groupon [8] are some well-known examples of configurable systems.", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=Firefox+web+browser&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref4"}, {"order": "5", "text": "<em>GCC compiler infrastructure</em>,  [online]  Available: http://gcc.gnu.org.", "title": "GCC compiler infrastructure", "context": [{"sec": "sec1", "text": " The Firefox web browser [4], the Linux kernel [9], the GCC compiler infrastructure [5], and the deals-recommendation web service Groupon [8] are some well-known examples of configurable systems.", "part": "1"}, {"sec": "sec5", "text": " In the second scenario, we evaluated the techniques on a large configurable system (GCC [5]) manifesting different characteristics compared to SPLs.", "part": "1"}, {"sec": "sec5b", "text": "We also evaluated S-SPLat against the GNU Compiler Collection (GCC) [5], a large configurable system with hundreds of options [6].", "part": "1"}, {"sec": "sec5d", "text": " One limitation of the study relates to the fact that SPLat currently only supports systems with dynamically bound feature variables (e.g., Groupon web [8], [29], and GCC [5]).", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=GCC+compiler+infrastructure&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref5"}, {"order": "6", "text": "<em>GCC Options</em>,  [online]  Available: https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html.", "title": "GCC Options", "context": [{"sec": "sec5b", "text": "We also evaluated S-SPLat against the GNU Compiler Collection (GCC) [5], a large configurable system with hundreds of options [6].", "part": "1"}, {"sec": "sec5b1b", "text": "We limited the number of options to analyze (see [6]) given the long execution times found in some test cases.", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=GCC+Options&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref6"}, {"order": "7", "text": "<em>GCC releases</em>,  [online]  Available: https://gcc.gnu.org/releases.html.", "title": "GCC releases", "context": [{"sec": "sec5b", "text": " In one setup we measured ability to find test failures in the GCC release 6.1 [7] (Section V-B1).", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=GCC+releases&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref7"}, {"order": "8", "text": "<em>Groupon</em>,  [online]  Available: http://groupon.com.", "title": "Groupon", "context": [{"sec": "sec1", "text": " The Firefox web browser [4], the Linux kernel [9], the GCC compiler infrastructure [5], and the deals-recommendation web service Groupon [8] are some well-known examples of configurable systems.", "part": "1"}, {"sec": "sec5d", "text": " One limitation of the study relates to the fact that SPLat currently only supports systems with dynamically bound feature variables (e.g., Groupon web [8], [29], and GCC [5]).", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=Groupon&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref8"}, {"order": "9", "text": "<em>Linux kernel</em>,  [online]  Available: http://www.kernel.org.", "title": "Linux kernel", "context": [{"sec": "sec1", "text": " The Firefox web browser [4], the Linux kernel [9], the GCC compiler infrastructure [5], and the deals-recommendation web service Groupon [8] are some well-known examples of configurable systems.", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=Linux+kernel&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref9"}, {"order": "10", "text": "<em>Soundiness webpage</em>,  [online]  Available: http://soundiness.org/.", "title": "Soundiness webpage", "context": [{"sec": "sec3", "text": " The intuition is that the use of heuristics can provide a better balance between cost and reliability and that balance is essential for practicality in this domain [10], [34], [36].", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=Soundiness+webpage&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref10"}, {"order": "11", "text": "Iago Abal, Claus Brabrand, Andrzej Wasowski, \"42 variability bugs in the Linux kernel: A qualitative analysis\", <em>Proceedings of the Automated Software Engineering</em>, pp. 421-432, 2014.", "title": "42 variability bugs in the Linux kernel: A qualitative analysis", "context": [{"sec": "sec1", "text": " Unfortunately, configuration-related errors are not rare [11], [19], [25], [39].", "part": "1"}, {"sec": "sec1", "text": "We analyzed S-SPLat with five basic heuristics that have demonstrated promising results in different studies [11], [38] and eleven combinations of these basic heuristics.", "part": "1"}, {"sec": "sec1", "text": " Overall, considering our experimental setup, results suggest that it is preferable to combine some heuristics that demand a relatively low number of test requirements (e.g., one-enabled and one-disabled [11]) than using heuristics that solicit more test requirements (e.g., pairwise [52]).", "part": "1"}, {"sec": "sec2b", "text": "Among the various sampling heuristics proposed in the literature related to testing configurable systems, we considered those that have been recently evaluated and are applicable in our context [11], [38].", "part": "1"}, {"sec": "sec5b4", "text": " These results confirm previous observations that configuration-related errors are often manifested in configurations involving a small number of input options [11], [19], [31], [39].", "part": "1"}, {"sec": "sec6a1b", "text": " [11] analyze the Linux kernel software repository to study configuration-related faults fixed by developers.", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/2642937.2642990", "abstract": "Feature-sensitive verification pursues effective analysis of the exponentially many variants of a program family. However, researchers lack examples of concrete bugs induced by variability, occurring in real large-scale systems. Such a collection of bugs is a requirement for goal-oriented research, serving to evaluate tool implementations of feature-sensitive analyses by testing them on real bugs. We present a qualitative study of 42 variability bugs collected from bug-fixing commits to the Linu...", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=42+variability+bugs+in+the+Linux+kernel%3A+A+qualitative+analysis&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref11"}, {"order": "12", "text": "Sven Apel, Don Batory, Christian K\u00e4stner, Gunter Saake, Feature-Oriented Software Product Lines: Concepts and Implementation, Springer-Verlag, 2013.", "title": "Feature-Oriented Software Product Lines: Concepts and Implementation", "context": [{"sec": "sec2a", "text": " We make no distinction between Software Product Lines (SPLs) [12], [15] and other kinds of configurable systems.", "part": "1"}], "links": {"crossRefLink": "https://doi.org/10.1007/978-3-642-37521-7", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Feature-Oriented+Software+Product+Lines%3A+Concepts+and+Implementation&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref12"}, {"order": "13", "text": "Sven Apel, Dirk Beyer, \"Feature cohesion in software product lines: An exploratory study\", <em>Proceedings of the International Conference on Software Engineering</em>, pp. 421-430, 2011.", "title": "Feature cohesion in software product lines: An exploratory study", "context": [{"sec": "sec5a1a", "text": "We selected eight SPLs previously used in other studies [13], [26], [32], [40].", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/1985793.1985851", "abstract": "Software product lines gain momentum in research and industry. Many product-line approaches use features as a central abstraction mechanism. Feature-oriented software development aims at encapsulating features in cohesive units to support program comprehension, variability, and reuse. Surprisingly, not much is known about the characteristics of cohesion in feature-oriented product lines, although proper cohesion is of special interest in product-line engineering due to its focus on variability a...", "pdfSize": "630KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Feature+cohesion+in+software+product+lines%3A+An+exploratory+study&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref13"}, {"order": "14", "text": "Sven Apel, Alexander von Rhein, Philipp Wendler, Armin Groblinger, Dirk Beyer, \"Strategies for product-line verification: case studies and experiments\", <em>Proceedings of the InternationalConference on Software Engineering</em>, pp. 482-491, 2013.", "title": "Strategies for product-line verification: case studies and experiments", "context": [{"sec": "sec6a1b", "text": " [14] have developed a model-checking tool for C and Java product lines.", "part": "1"}], "links": {"abstract": "Product-line technology is increasingly used in mission-critical and safety-critical applications. Hence, researchers are developing verification approaches that follow different strategies to cope with the specific properties of product lines. While the research community is discussing the mutual strengths and weaknesses of the different strategies\u2014mostly at a conceptual level\u2014there is a lack of evidence in terms of case studies, tool implementations, and experiments. We have collected and prep...", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Strategies+for+product-line+verification%3A+case+studies+and+experiments&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref14"}, {"order": "15", "text": "Don Batory, Clay Johnson, Bob MacDonald, Dale von Heeder, \"Achieving extensibility through product-lines and domain-specific languages: A case study\", <em>ACM Transactions on Software Engineering and Methodology (TOSEM)</em>, vol. 11, no. 2, pp. 191-214, 2002.", "title": "Achieving extensibility through product-lines and domain-specific languages: A case study", "context": [{"sec": "sec2a", "text": " We make no distinction between Software Product Lines (SPLs) [12], [15] and other kinds of configurable systems.", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/505145.505147", "abstract": "This is a case study in the use of product-line architectures (PLAs) and domain-specific languages (DSLs) to design an extensible command-and-control simulator for Army fire support. The reusable components of our PLA are layers or &#34;aspects&#34; whose addition or removal simultaneously impacts the source code of multiple objects in multiple, distributed programs. The complexity of our component specifications is substantially reduced by using a DSL for defining and refining state machines, abstracti...", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Achieving+extensibility+through+product-lines+and+domain-specific+languages%3A+A+case+study&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref15"}, {"order": "16", "text": "Abu Syed Md Masud Ching-Lai Hwang, Multiple Objective Decision Making \u2014 Methods and Applications: a state-of-the-art survey, Springer-Verlag, vol. 164, 1979.", "title": "Multiple Objective Decision Making \u2014 Methods and Applications: a state-of-the-art survey", "context": [{"sec": "sec5a4", "text": " To facilitate visualization, the plots show the Pareto fronts [16] of measurements as solid circles.", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=Multiple+Objective+Decision+Making+%E2%80%94+Methods+and+Applications%3A+a+state-of-the-art+survey&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref16"}, {"order": "17", "text": "Myra B. Cohen, Peter B. Gibbons, Warwick B. Mugridge, Charles J. Colbourn, \"Constructing test suites for interaction testing\", <em>Proceedings of the International Conference on Software Engineering</em>, pp. 38-48, 2003.", "title": "Constructing test suites for interaction testing", "context": [{"sec": "sec1", "text": "Combinatorial Interaction Testing (CIT) [51] has been popularized to balance probability of finding configuration errors (i.e., efficacy) and efficiency [17], [30], [31], [38], [42].", "part": "1"}], "links": {"documentLink": "/document/1201186", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1201186", "abstract": "Software system faults are often caused by unexpected interactions among components. Yet the size of a test suite required to test all possible combinations of interactions can be prohibitive in even a moderately sized project. Instead, we may use pairwise or t-way testing to provide a guarantee that all pairs or t-way combinations of components are tested together This concept draws on methods used in statistical testing for manufacturing and has been extended to software system testing. A cove...", "pdfSize": "371KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Constructing+test+suites+for+interaction+testing&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref17"}, {"order": "18", "text": "Marcelo d'Amorim, Steven Lauterburg, Darko Marinov, \"Delta execution for efficient state-space exploration of object-oriented programs\", <em>IEEE Transactions on Software Engineering</em>, vol. 34, no. 5, pp. 597-613, 2008.", "title": "Delta execution for efficient state-space exploration of object-oriented programs", "context": [{"sec": "sec6a1a", "text": " Multi-execution approaches, such as DeltaExecution [18], SharedExecution [28] and Varex [41], execute a given test simultaneously against sets of configurations; they leverage the similarities that exist across configurations to reduce the total number of paths explored in a test and the overall amount of computation.", "part": "1"}, {"sec": "sec6a1a", "text": " On the one hand, building (and maintaining) such interpreters is challenging, especially for statically-typed languages [18], [28], [45].", "part": "1"}], "links": {"documentLink": "/document/4528965", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4528965", "abstract": "We present Delta execution, a technique that speeds up state-space exploration of object-oriented programs. State-space exploration is the essence of model checking and an increasingly popular approach for automating test generation. A key issue in exploration of object-oriented programs is handling the program state, in particular the heap. We exploit the fact that many execution paths in state-space exploration partially overlap. Delta execution simultaneously operates on several states/heaps ...", "pdfSize": "4878KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Delta+execution+for+efficient+state-space+exploration+of+object-oriented+programs&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref18"}, {"order": "19", "text": "Brady J. Garvin, Myra B. Cohen, \"Feature interaction faults revisited: An exploratory study\", <em>Proceedings of the InternationalSymposium on Software Reliability Engineering</em>, pp. 90-99, 2011.", "title": "Feature interaction faults revisited: An exploratory study", "context": [{"sec": "sec1", "text": " Unfortunately, configuration-related errors are not rare [11], [19], [25], [39].", "part": "1"}, {"sec": "sec5b4", "text": " These results confirm previous observations that configuration-related errors are often manifested in configurations involving a small number of input options [11], [19], [31], [39].", "part": "1"}], "links": {"abstract": "While a large body of research is dedicated to testing for feature interactions in configurable software, there has been little work that examines what constitutes such a fault at the code level. In consequence, we do not know how prevalent real interaction faults are in practice, what a typical interaction fault looks like in code, how to seed interaction faults, or whether current interaction testing techniques are effective at finding the faults they aim to detect. We make a first step in thi...", "pdfSize": "205KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Feature+interaction+faults+revisited%3A+An+exploratory+study&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref19"}, {"order": "20", "text": "\"Preparing Testcases\", <em>HowToPrepare ATestcase</em>,  [online]  Available: http://gcc.gnu.org/wiki/.", "title": "Preparing Testcases", "context": [{"sec": "sec5b1a", "text": " For example, compilation tasks include preprocessing, compiling, assembling, linking, and running code [20].", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=Preparing+Testcases&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref20"}, {"order": "21", "text": "<em>GrammaTech. Hybrid concolic execution</em>,  [online]  Available: http://blogs.grammatech.com/hybrid-concolic-execution-part-l.", "title": "GrammaTech. Hybrid concolic execution", "context": [{"sec": "sec1", "text": " Our approach is similar in spirit to hybrid concolic execution [21], [36]; (implementation) we implemented S-SPLat, a variant of our previously-developed technique SPLat [29].", "part": "1"}, {"sec": "sec6a1d", "text": " Hybrid concolic execution [21], [36] is a variant of concolic execution that aims to explore the state space more broadly and deeply compared to a regular concolic execution, which conceptually can get stuck (e.g., as observed with saturation in coverage) in dense branches of the symbolic tree.", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=GrammaTech.+Hybrid+concolic+execution&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref21"}, {"order": "22", "text": "Michaela Greiler, Arie van Deursen, Margaret-Anne Storey, \"Test confessions: A study of testing practices for plug-in systems\", <em>Proceedings of the InternationalConference on Software Engineering</em>, pp. 244-254, 2012.", "title": "Test confessions: A study of testing practices for plug-in systems", "context": [{"sec": "sec1", "text": " In another limit, testing against one (default) configuration, albeit popular, leads to high chances of escaped defects [22], [35].", "part": "1"}], "links": {"documentLink": "/document/6227189", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6227189", "abstract": "Testing plug-in-based systems is challenging due to complex interactions among many different plug-ins, and variations in version and configuration. The objective of this paper is to increase our understanding of what testers and developers think and do when it comes to testing plug-in-based systems. To that end, we conduct a qualitative (grounded theory) study, in which we interview 25 senior practitioners about how they test plug-in applications based on the Eclipse plug-in architecture. The o...", "pdfSize": "715KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Test+confessions%3A+A+study+of+testing+practices+for+plug-in+systems&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref22"}, {"order": "23", "text": "Robert Johnson, <em>More details on today's outage</em>,  [online]  Available: https://www.facebook.comlnotes/facebook-engineering/more-details-on-todaysoutage/431441338919.", "title": "More details on today's outage", "context": [{"sec": "sec1", "text": " Some of these errors have been widely publicized in the media given the volume of users or data they affected [1], [3], [23].", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=More+details+on+today%27s+outage&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref23"}, {"order": "24", "text": "Kyo Kang, Sholom Cohen, James Hess, William Nowak, Spencer Peterson, \"Feature-Oriented Domain Analysis (FODA) Feasibility Study\", <em>Technical Report CMU/SEI-90-TR-21</em>, 1990.", "title": "Feature-Oriented Domain Analysis (FODA) Feasibility Study", "context": [{"sec": "sec2a", "text": "A feature model (FM) [24] distinguishes which combinations of variables are legal from those that are not.", "part": "1"}], "links": {"crossRefLink": "https://doi.org/10.21236/ADA235785", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Feature-Oriented+Domain+Analysis+%28FODA%29+Feasibility+Study&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref24"}, {"order": "25", "text": "Christian K\u00e4stner, Paolo G. Giarrusso, Tillmann Rendel, Sebastian Erdweg, Klaus Ostermann, Thorsten Berger, \"Variability-aware parsing in the presence of lexical macros and conditional compilation\", <em>Proceedings of the Object-Oriented Programing Systems Languages and Applications</em>, pp. 805-824, 2011.", "title": "Variability-aware parsing in the presence of lexical macros and conditional compilation", "context": [{"sec": "sec1", "text": " Unfortunately, configuration-related errors are not rare [11], [19], [25], [39].", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/2048066.2048128", "abstract": "In many projects, lexical preprocessors are used to manage different variants of the project (using conditional compilation) and to define compile-time code transformations (using macros). Unfortunately, while being a simple way to implement variability, conditional compilation and lexical macros hinder automatic analysis, even though such analysis is urgently needed to combat variability-induced complexity. To analyze code with its variability, we need to parse it without preprocessing it. Howe...", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Variability-aware+parsing+in+the+presence+of+lexical+macros+and+conditional+compilation&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref25"}, {"order": "26", "text": "Chang Hwan Peter Kim, Don S. Batory, Sarfraz Khurshid, \"Reducing combinatorics in testing product lines\", <em>Proceedings of the Aspect-Oriented Software Development</em>, pp. 57-68, 2011.", "title": "Reducing combinatorics in testing product lines", "context": [{"sec": "sec2b", "text": "Notepad is a visual text editor, implemented as a configurable system, that has been previously used in related studies [26], [27], [29].", "part": "1"}, {"sec": "sec5a1a", "text": "We selected eight SPLs previously used in other studies [13], [26], [32], [40].", "part": "1"}, {"sec": "sec5a2", "text": " To note that previous studies used similar metrics for similar reasons [26], [38].", "part": "1"}, {"sec": "sec6a1c", "text": " [26] previously developed a static analysis to determine which features are relevant to the outcome of a test.", "part": "1"}, {"sec": "sec6a1c", "text": " [26].", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=Reducing+combinatorics+in+testing+product+lines&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref26"}, {"order": "27", "text": "Chang Hwan Peter Kim, Eric Bodden, Don S. Batory, Sarfraz Khurshid, \"Reducing configurations to monitor in a software product line\", <em>Proceedings of the Runtime Verification</em>, pp. 285-299, 2010.", "title": "Reducing configurations to monitor in a software product line", "context": [{"sec": "sec2b", "text": "Notepad is a visual text editor, implemented as a configurable system, that has been previously used in related studies [26], [27], [29].", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=Reducing+configurations+to+monitor+in+a+software+product+line&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref27"}, {"order": "28", "text": "Chang Hwan Peter Kim, Sarfraz Khurshid, Don Batory, \"Shared execution for efficiently testing product lines\", <em>Proceedings of the International Symposium on Software Reliability Engineering</em>, pp. 221-230, 2012.", "title": "Shared execution for efficiently testing product lines", "context": [{"sec": "sec1", "text": "More recently, sound testing techniques have been proposed [28], [29], [33], [41]; they assure that all configuration errors that can be captured with a given test will be captured.", "part": "1"}, {"sec": "sec6a1a", "text": " Multi-execution approaches, such as DeltaExecution [18], SharedExecution [28] and Varex [41], execute a given test simultaneously against sets of configurations; they leverage the similarities that exist across configurations to reduce the total number of paths explored in a test and the overall amount of computation.", "part": "1"}, {"sec": "sec6a1a", "text": " On the one hand, building (and maintaining) such interpreters is challenging, especially for statically-typed languages [18], [28], [45].", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=Shared+execution+for+efficiently+testing+product+lines&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref28"}, {"order": "29", "text": "Chang Hwan Peter Kim, Darko Marinov, Sarfraz Khurshid, Don Batory, Sabrina Souto, Paulo Barros, Marcelo d'Amorim, \"SPLat: Lightweight dynamic analysis for reducing combinatorics in testing configurable systems\", <em>Proceedings of the Foundations of Software Engineering</em>, pp. 257-267, 2013.", "title": "SPLat: Lightweight dynamic analysis for reducing combinatorics in testing configurable systems", "context": [{"sec": "sec1", "text": "More recently, sound testing techniques have been proposed [28], [29], [33], [41]; they assure that all configuration errors that can be captured with a given test will be captured.", "part": "1"}, {"sec": "sec1", "text": " This is the case, for example, when test execution dynamically accesses a relatively small number of configuration variables [29].", "part": "1"}, {"sec": "sec1", "text": " In this study, we used SPLat [29], [47], [49], a sound technique, previously developed by the authors, that monitors variable accesses in one execution and, based on that, decides which configurations should be executed next.", "part": "1"}, {"sec": "sec1", "text": " Our approach is similar in spirit to hybrid concolic execution [21], [36]; (implementation) we implemented S-SPLat, a variant of our previously-developed technique SPLat [29].", "part": "1"}, {"sec": "sec2b", "text": "Notepad is a visual text editor, implemented as a configurable system, that has been previously used in related studies [26], [27], [29].", "part": "1"}, {"sec": "sec2c", "text": "In a nutshell, SPLat [29] works as follows.", "part": "1"}, {"sec": "sec4", "text": "This section describes S-SPLat (for Sampling with SPLat), a modified version of the SPLat algorithm [29].", "part": "1"}, {"sec": "sec4", "text": " A complete version of SPLat can be found elsewhere [29].", "part": "1"}, {"sec": "sec5d", "text": " One limitation of the study relates to the fact that SPLat currently only supports systems with dynamically bound feature variables (e.g., Groupon web [8], [29], and GCC [5]).", "part": "1"}, {"sec": "sec6a1a", "text": " Single-execution approaches, such as SPLat [29], [49], in contrast, execute a test once for each reachable configuration that they discover while building a decision tree from configuration variables accessed during execution.", "part": "1"}, {"sec": "sec6a1c", "text": " It is important to note that obtaining dynamic reachability information efficiently is the key feature of SPLat [29], which built upon the ideas of Kim et al. [26].", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=SPLat%3A+Lightweight+dynamic+analysis+for+reducing+combinatorics+in+testing+configurable+systems&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref29"}, {"order": "30", "text": "D. Richard Kuhn, Raghu N. Kacker, Yu Lei, \"Practical combinatorial testing\", <em>Technical Report SP 800-142</em>, 2010.", "title": "Practical combinatorial testing", "context": [{"sec": "sec1", "text": "Combinatorial Interaction Testing (CIT) [51] has been popularized to balance probability of finding configuration errors (i.e., efficacy) and efficiency [17], [30], [31], [38], [42].", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=Practical+combinatorial+testing&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref30"}, {"order": "31", "text": "D. Richard Kuhn, Dolores R. Wallace, Albert M. Gallo, \"Software fault interactions and implications for software testing\", <em>IEEE Transactions on Software Engineering</em>, vol. 30, no. 6, pp. 418-421, 2004.", "title": "Software fault interactions and implications for software testing", "context": [{"sec": "sec1", "text": "Combinatorial Interaction Testing (CIT) [51] has been popularized to balance probability of finding configuration errors (i.e., efficacy) and efficiency [17], [30], [31], [38], [42].", "part": "1"}, {"sec": "sec5b4", "text": " These results confirm previous observations that configuration-related errors are often manifested in configurations involving a small number of input options [11], [19], [31], [39].", "part": "1"}], "links": {"documentLink": "/document/1321063", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=1321063", "abstract": "Exhaustive testing of computer software is intractable, but empirical studies of software failures suggest that testing can in some cases be effectively exhaustive. We show that software failures in a variety of domains were caused by combinations of relatively few conditions. These results have important implications for testing. If all faults in a system can be triggered by a combination of n or fewer parameters, then testing all n-tuples of parameters is effectively equivalent to exhaustive t...", "pdfSize": "362KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Software+fault+interactions+and+implications+for+software+testing&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref31"}, {"order": "32", "text": "Philipp Lengauer, Verena Bitto, Florian Angerer, Paul Gr\u00fcnbacher, Hanspeter Mossenb\u00f6ck, \"Where has all my memory gone?: Determining memory characteristics of product variants using virtual-machine-level monitoring\", <em>Proceedings of the Variability Modelling of Software-Intensive Systems</em>, pp. 13:1-13:8, 2013.", "title": "Where has all my memory gone?: Determining memory characteristics of product variants using virtual-machine-level monitoring", "context": [{"sec": "sec5a1a", "text": "We selected eight SPLs previously used in other studies [13], [26], [32], [40].", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/2556624.2556628", "abstract": "Non-functional properties such as memory footprint have recently gained importance in software product line research. However, determining the memory characteristics of individual features and product variants is extremely challenging. We present an approach that supports the monitoring of memory characteristics of individual features at the level of Java virtual machines. Our approach provides extensions to Java virtual machines to track memory allocations and deal-locations of individual featu...", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Where+has+all+my+memory+gone%3F%3A+Determining+memory+characteristics+of+product+variants+using+virtual-machine-level+monitoring&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref32"}, {"order": "33", "text": "J\u00f6rg Liebig, Alexander von Rhein, Christian K\u00e4stner, Sven Apel, Jens D\u00f6rre, Christian Lengauer, \"Scalable analysis of variable software\", <em>Proceedings of the Foundations of Software Engineering</em>, pp. 81-91, 2013.", "title": "Scalable analysis of variable software", "context": [{"sec": "sec1", "text": "More recently, sound testing techniques have been proposed [28], [29], [33], [41]; they assure that all configuration errors that can be captured with a given test will be captured.", "part": "1"}, {"sec": "sec6a1b", "text": " [33] perform studies to detect the strengths and weaknesses of variability-aware and sampling-based analyses (single configuration, pair-wise and code-coverage).", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/2491411.2491437", "abstract": "The advent of variability management and generator technology enables users to derive individual variants from a variable code base based on a selection of desired configuration options. This approach gives rise to the generation of possibly billions of variants that, however, cannot be efficiently analyzed for errors with classic analysis techniques. To address this issue, researchers and practitioners usually apply sampling heuristics. While sampling reduces the analysis effort significantly, ...", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Scalable+analysis+of+variable+software&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref33"}, {"order": "34", "text": "Benjamin Livshits, Manu Sridharan, Yannis Smaragdakis, Ond\u0159ej Lhot\u00e1k, J. Nelson Amaral, Bor-Yuh Evan Chang, Samuel Z. Guyer, Uday P. Khedker, Anders M\u00f8ller, Dimitrios Vardoulakis, \"In defense of soundiness: A manifesto\" in Communications of the ACM, vol. 58, no. 2, pp. 44-46, 2015.", "title": "In defense of soundiness: A manifesto", "context": [{"sec": "sec1", "text": " Recently, the static analysis community acknowledged the importance of making (and documenting) conscious unsound design choices in favor of practical soundy solutions [34].", "part": "1"}, {"sec": "sec3", "text": " The intuition is that the use of heuristics can provide a better balance between cost and reliability and that balance is essential for practicality in this domain [10], [34], [36].", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/2644805", "abstract": "Soundy is the new sound.", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=In+defense+of+soundiness%3A+A+manifesto&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref34"}, {"order": "35", "text": "Ivan do Carmo Machado, John D. Mcgregor, Yguarata Cerqueira Cavalcanti, Eduardo Santana de Almeida, \"On strategies for testing software product lines: A systematic literature review\", <em>Information and Software Technology</em>, vol. 56, no. 10, pp. 1183-1199, 2014.", "title": "On strategies for testing software product lines: A systematic literature review", "context": [{"sec": "sec1", "text": " In another limit, testing against one (default) configuration, albeit popular, leads to high chances of escaped defects [22], [35].", "part": "1"}], "links": {"crossRefLink": "https://doi.org/10.1016/j.infsof.2014.04.002", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=On+strategies+for+testing+software+product+lines%3A+A+systematic+literature+review&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref35"}, {"order": "36", "text": "Rupak Majumdar, Koushik Sen, \"Hybrid concolic testing\", <em>Proceedings of the InternationalConference on Software Engineering</em>, pp. 416-426, 2007.", "title": "Hybrid concolic testing", "context": [{"sec": "sec1", "text": " Our approach is similar in spirit to hybrid concolic execution [21], [36]; (implementation) we implemented S-SPLat, a variant of our previously-developed technique SPLat [29].", "part": "1"}, {"sec": "sec3", "text": " The intuition is that the use of heuristics can provide a better balance between cost and reliability and that balance is essential for practicality in this domain [10], [34], [36].", "part": "1"}, {"sec": "sec6a1d", "text": " Hybrid concolic execution [21], [36] is a variant of concolic execution that aims to explore the state space more broadly and deeply compared to a regular concolic execution, which conceptually can get stuck (e.g., as observed with saturation in coverage) in dense branches of the symbolic tree.", "part": "1"}], "links": {"documentLink": "/document/4222603", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=4222603", "abstract": "We present hybrid concolic testing, an algorithm that interleaves random testing with concolic execution to obtain both a deep and a wide exploration of program state space. Our algorithm generates test inputs automatically by interleaving random testing until saturation with bounded exhaustive symbolic exploration of program points. It thus combines the ability of random search to reach deep program states quickly together with the ability of concolic testing to explore states in a neighborhood...", "pdfSize": "153KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Hybrid+concolic+testing&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref36"}, {"order": "37", "text": "Dusica Marijan, Arnaud Gotlieb, Sagar Sen, Aymeric Hervieu, \"Practical pairwise testing for software product lines\", <em>Proceedings of the Software Product Line Conference</em>, pp. 227-235, 2013.", "title": "Practical pairwise testing for software product lines", "context": [{"sec": "sec6a1b", "text": " [37] use the t-wise sampling algorithm to cover all t configuration option combinations.", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/2491627.2491646", "abstract": "One key challenge for software product lines is efficiently managing variability throughout their lifecycle. In this paper, we address the problem of variability in software product lines testing. We (1) identify a set of issues that must be addressed to make software product line testing work in practice and (2) provide a framework that combines a set of techniques to solve these issues. The framework integrates feature modelling, combinatorial interaction testing and constraint programming tec...", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Practical+pairwise+testing+for+software+product+lines&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref37"}, {"order": "38", "text": "Fl\u00e1vio Medeiros, Christian K\u00e4stner, M\u00e1rcie Ribeiro, Rohit Gheyi, Sven Apel, \"A comparison of 10 sampling algorithms for configurable systems\", <em>Proceedings of the InternationalConference on Software Engineering</em>, pp. 643-654, 2016.", "title": "A comparison of 10 sampling algorithms for configurable systems", "context": [{"sec": "sec1", "text": "Combinatorial Interaction Testing (CIT) [51] has been popularized to balance probability of finding configuration errors (i.e., efficacy) and efficiency [17], [30], [31], [38], [42].", "part": "1"}, {"sec": "sec1", "text": "We analyzed S-SPLat with five basic heuristics that have demonstrated promising results in different studies [11], [38] and eleven combinations of these basic heuristics.", "part": "1"}, {"sec": "sec2b", "text": "Among the various sampling heuristics proposed in the literature related to testing configurable systems, we considered those that have been recently evaluated and are applicable in our context [11], [38].", "part": "1"}, {"sec": "sec5a2", "text": " To note that previous studies used similar metrics for similar reasons [26], [38].", "part": "1"}, {"sec": "sec5e", "text": " [38] showing the superior performance of this combination.", "part": "1"}, {"sec": "sec6a1b", "text": " [38] conducted an extensive comparative study of 10 sampling algorithms (5 variations of \\$t\\$-wise, statement-coverage, random, one-disabled, one-enabled, and most-enabled-disabled) regarding their fault-detection ability and size of sample sets in the Linux kernel, Apache, and other real C program families.", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/2884781.2884793", "abstract": "Almost every software system provides configuration options to tailor the system to the target platform and application scenario. Often, this configurability renders the analysis of every individual system configuration infeasible. To address this problem, researchers have proposed a diverse set of sampling algorithms. We present a comparative study of 10 state-of-the-art sampling algorithms regarding their fault-detection capability and size of sample sets. The former is important to improve so...", "pdfSize": "346KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=A+comparison+of+10+sampling+algorithms+for+configurable+systems&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref38"}, {"order": "39", "text": "Fl\u00e1vio Medeiros, M\u00e1rcio Ribeiro, Rohit Gheyi, \"Investigating preprocessor-based syntax errors\", <em>Proceedings of the Generative Programming: Concepts and Experiences</em>, pp. 75-84, 2013.", "title": "Investigating preprocessor-based syntax errors", "context": [{"sec": "sec1", "text": " Unfortunately, configuration-related errors are not rare [11], [19], [25], [39].", "part": "1"}, {"sec": "sec5b4", "text": " These results confirm previous observations that configuration-related errors are often manifested in configurations involving a small number of input options [11], [19], [31], [39].", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/2517208.2517221", "abstract": "The C preprocessor is commonly used to implement variability in program families. Despite the widespread usage, some studies indicate that the C preprocessor makes variability implementation difficult and error-prone. However, we still lack studies to investigate preprocessor-based syntax errors and quantify to what extent they occur in practice. In this paper, we define a technique based on a variability-aware parser to find syntax errors in releases and commits of program families. To investig...", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Investigating+preprocessor-based+syntax+errors&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref39"}, {"order": "40", "text": "Jens Meinicke, Chu-Pan Wong, Christian K\u00e4stner, Thomas Th\u00fcm, Gunter Saake, \"On essential configuration complexity: Measuring interactions in highly-configurable systems\", <em>Proceedings of the Automated Software Engineering</em>, pp. 483-494, 2016.", "title": "On essential configuration complexity: Measuring interactions in highly-configurable systems", "context": [{"sec": "sec1", "text": " Recent empirical studies indicate that scalability depends on many factors including the subjects and tests used [40], [47], [49].", "part": "1"}, {"sec": "sec5a1a", "text": "We selected eight SPLs previously used in other studies [13], [26], [32], [40].", "part": "1"}, {"sec": "sec6a1d", "text": "Recent empirical study found evidence that practical configuration complexity is often much lower compared to theoretical configuration complexity [40].", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/2970276.2970322", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=On+essential+configuration+complexity%3A+Measuring+interactions+in+highly-configurable+systems&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref40"}, {"order": "41", "text": "Hung Viet Nguyen, Christian K\u00e4stner, Tien N. Nguyen, \"Exploring variability-aware execution for testing plugin-based web applications\", <em>Proceedings of the International Conference on Software Engineering</em>, pp. 907-918, 2014.", "title": "Exploring variability-aware execution for testing plugin-based web applications", "context": [{"sec": "sec1", "text": "More recently, sound testing techniques have been proposed [28], [29], [33], [41]; they assure that all configuration errors that can be captured with a given test will be captured.", "part": "1"}, {"sec": "sec6a1a", "text": " Multi-execution approaches, such as DeltaExecution [18], SharedExecution [28] and Varex [41], execute a given test simultaneously against sets of configurations; they leverage the similarities that exist across configurations to reduce the total number of paths explored in a test and the overall amount of computation.", "part": "1"}, {"sec": "sec6a1a", "text": " [41]).", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=Exploring+variability-aware+execution+for+testing+plugin-based+web+applications&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref41"}, {"order": "42", "text": "Changhai Nie, Hareton Leung, \"A survey of combinatorial testing\", <em>ACM Computing Surveys</em>, vol. 43, no. 2, pp. 11:1-11:29, 2011.", "title": "A survey of combinatorial testing", "context": [{"sec": "sec1", "text": "Combinatorial Interaction Testing (CIT) [51] has been popularized to balance probability of finding configuration errors (i.e., efficacy) and efficiency [17], [30], [31], [38], [42].", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/1883612.1883618", "abstract": "Combinatorial Testing (CT) can detect failures triggered by interactions of parameters in the Software Under Test (SUT) with a covering array test suite generated by some sampling mechanisms. It has been an active field of research in the last twenty years. This article aims to review previous work on CT, highlights the evolution of CT, and identifies important issues, methods, and applications of CT, with the goal of supporting and directing future practice and research in this area. First, we ...", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=A+survey+of+combinatorial+testing&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref42"}, {"order": "43", "text": "Thomas J. Ostrand, Marc J. Balcer, \"The category-partition method for specifying and generating functional tests\", <em>Communications of ACM</em>, vol. 31, no. 6, pp. 676-686, 1988.", "title": "The category-partition method for specifying and generating functional tests", "context": [{"sec": "sec4c", "text": " Instead, we applied the Ostrand and Barcer's category partitioning method [43], treating range types as boolean types.", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/62959.62964", "abstract": "A method for creating functional test suites has been developed in which a test engineer analyzes the system specification, writes a series of formal test specifications, and then uses a generator tool to produce test descriptions from which test scripts are written. The advantages of this method are that the tester can easily modify the test specification when necessary, and can control the complexity and number of the tests by annotating the tests specification with constraints.", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=The+category-partition+method+for+specifying+and+generating+functional+tests&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref43"}, {"order": "44", "text": "Gilles Perrouin, Sagar Sen, Jacques Klein, Benoit Baudry, Yves le Traon, \"Automated and scalable t-wise test case generation strategies for software product lines\", <em>Proceedings of the International Conference on Software Testing Verification and Validation</em>, pp. 459-468, 2010.", "title": "Automated and scalable t-wise test case generation strategies for software product lines", "context": [{"sec": "sec6a1b", "text": " [44] and Marijan et al. [37] use the t-wise sampling algorithm to cover all t configuration option combinations.", "part": "1"}], "links": {"abstract": "Software Product Lines (SPL) are difficult to validate due to combinatorics induced by variability across their features. This leads to combinatorial explosion of the number of derivable products. Exhaustive testing in such a large space of products is infeasible. One possible option is to test SPLs by generating test cases that cover all possible T feature interactions (T-wise). T-wise dramatically reduces the number of test products while ensuring reasonable SPL coverage. However, automatic ge...", "pdfSize": "1417KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Automated+and+scalable+t-wise+test+case+generation+strategies+for+software+product+lines&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref44"}, {"order": "45", "text": "Koushik Sen, George Necula, Liang Gong, Wontae Choi, \"MultiSE: Multi-path symbolic execution using value summaries\", <em>Proceedings of the Foundations of Software Engineering</em>, pp. 842-853, 2015.", "title": "MultiSE: Multi-path symbolic execution using value summaries", "context": [{"sec": "sec6a1a", "text": " On the one hand, building (and maintaining) such interpreters is challenging, especially for statically-typed languages [18], [28], [45].", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/2786805.2786830", "abstract": "Dynamic symbolic execution (DSE) has been proposed to effectively generate test inputs for real-world programs. Unfortunately, DSE techniques do not scale well for large realistic programs, because often the number of feasible execution paths of a program increases exponentially with the increase in the length of an execution path. In this paper, we propose MultiSE, a new technique for merging states incrementally during symbolic execution, without using auxiliary variables. The key idea of Mult...", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=MultiSE%3A+Multi-path+symbolic+execution+using+value+summaries&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref45"}, {"order": "46", "text": "Charles Song, Adam Porter, Jeffrey S. Foster, \"iTree: Efficiently discovering high-coverage configurations using interaction trees\", <em>Proceedings of the International Conference on Software Engineering</em>, pp. 903-913, 2012.", "title": "iTree: Efficiently discovering high-coverage configurations using interaction trees", "context": [{"sec": "sec6a1b", "text": " [46] propose interaction tree discovery algorithm (iTree) to support the testing of highly configurable systems. iTree selects a subset of configurations in which the execution of the system's test suite will achieve high coverage.", "part": "1"}], "links": {"documentLink": "/document/6227129", "pdfLink": "/stamp/stamp.jsp?tp=&arnumber=6227129", "abstract": "Software configurability has many benefits, but it also makes programs much harder to test, as in the worst case the program must be tested under every possible configuration. One potential remedy to this problem is combinatorial interaction testing (CIT), in which typically the developer selects a strength t and then computes a covering array containing all t-way configuration option combinations. However, in a prior study we showed that several programs have important high-strength interaction...", "pdfSize": "491KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=iTree%3A+Efficiently+discovering+high-coverage+configurations+using+interaction+trees&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref46"}, {"order": "47", "text": "Sabrina Souto, Marcelo d'Amorim, <em>Time-Space Efficient Regression Testing for Configurable Systems</em>.", "title": "Time-Space Efficient Regression Testing for Configurable Systems", "context": [{"sec": "sec1", "text": " Recent empirical studies indicate that scalability depends on many factors including the subjects and tests used [40], [47], [49].", "part": "1"}, {"sec": "sec1", "text": " In this study, we used SPLat [29], [47], [49], a sound technique, previously developed by the authors, that monitors variable accesses in one execution and, based on that, decides which configurations should be executed next.", "part": "1"}, {"sec": "sec3", "text": " Unfortunately, we observed that, for a large system, such as GCC, with hundreds of configuration options, exploring all reachable configurations is impractical for several tests [47], [49].", "part": "1"}, {"sec": "sec6a1c", "text": " Despite the positive results reported by Kim et al. (caveat: evaluation involved large subjects but tests cover only a small fraction of the code), it is important to note that obtaining reachability information for these systems per test is challenging as: (i) the analysis needs to (re)run for each test, (ii) the analysis needs to run whenever the program changes, and (iii) often tests are designed to statically reach the entire codebase (e.g., system tests) \u2014 i.e., only the test input data can discriminate which parts of the code will be actually executed [47].", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=Time-Space+Efficient+Regression+Testing+for+Configurable+Systems&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref47"}, {"order": "48", "text": "Sabrina Souto, Marcelo d'Amorim, Rohit Gheyi, <em>S-SP Lat: Balancing soundness and efficiency for practical testing of configurable systems (Artifact)</em>,  [online]  Available: https://sabrinadfs.github.io/s-splat/.", "title": "S-SP Lat: Balancing soundness and efficiency for practical testing of configurable systems (Artifact)", "context": [{"sec": "sec1", "text": " The code, datasets, containers, and scripts are all accessible from our website [48].", "part": "1"}, {"sec": "sec5d", "text": " Our datasets and implementations are publicly available [48].", "part": "1"}, {"sec": "sec5e", "text": " Additional results can be found on our website [48].", "part": "1"}, {"sec": "sec7", "text": " Implementation and experimental infrastructure can be found on our website [48].", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=S-SP+Lat%3A+Balancing+soundness+and+efficiency+for+practical+testing+of+configurable+systems+%28Artifact%29&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref48"}, {"order": "49", "text": "Sabrina Souto, Divya Gopinath, Marcelo d'Amorim, Darko Marinov, Sarfraz Khurshid, Don Batory, \"Faster bug detection for software product lines with incomplete feature models\", <em>Proceedings of the Software Product Line Conference</em>, pp. 151-160, 2015.", "title": "Faster bug detection for software product lines with incomplete feature models", "context": [{"sec": "sec1", "text": " Recent empirical studies indicate that scalability depends on many factors including the subjects and tests used [40], [47], [49].", "part": "1"}, {"sec": "sec1", "text": " In this study, we used SPLat [29], [47], [49], a sound technique, previously developed by the authors, that monitors variable accesses in one execution and, based on that, decides which configurations should be executed next.", "part": "1"}, {"sec": "sec1", "text": " The heuristic variants of S-SPLat were able to find all five crashes that we previously-documented [49] on GCC release 4.8.2 and uncovered two new crashes on release 6.1, one of which was reported to the GCC team and was already fixed.", "part": "1"}, {"sec": "sec3", "text": " Unfortunately, we observed that, for a large system, such as GCC, with hundreds of configuration options, exploring all reachable configurations is impractical for several tests [47], [49].", "part": "1"}, {"sec": "sec5b", "text": " We focused on crashes that the authors found in a previous study [49].", "part": "1"}, {"sec": "sec5b1a", "text": " We focused on that suite because previous study has shown a higher incidence of bugs found with it [49].", "part": "1"}, {"sec": "sec5b4", "text": "Next we evaluated the techniques on bugs found in a study, previously conducted by some of the authors of this paper, on release 4.8.2 of GCC [49].", "part": "1"}, {"sec": "sec5c", "text": " Considering the crash scenarios of GCC, we observed that all crashes found manifested in valid configurations, indicating that the use of validation is not beneficial. (We used GCC constraints documented in a previous study we conducted [49].) Considering the scenarios of failures of GCC, we also observed that the techniques performed consistently with and without feature constraints.", "part": "1"}, {"sec": "sec6a1a", "text": " Single-execution approaches, such as SPLat [29], [49], in contrast, execute a test once for each reachable configuration that they discover while building a decision tree from configuration variables accessed during execution.", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/2791060.2791093", "abstract": "A software product line (SPL) is a family of programs that are differentiated by features --- increments in functionality. Systematically testing an SPL is challenging because it requires running each test of a test suite against a combinatorial number of programs. Feature models capture dependencies among features and can (1) reduce the space of programs to test and (2) enable accurate categorization of failing tests as failures of programs or the tests themselves, not as failures due to illega...", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Faster+bug+detection+for+software+product+lines+with+incomplete+feature+models&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref49"}, {"order": "50", "text": "Reinhard Tartler, Daniel Lohmann, Christian Dietrich, Christoph Egger, Julio Sincero, \"Configuration coverage in the analysis of large-scale system software\", <em>Proceedings of the Programming Languages and Operating Systems</em>, pp. 2:1-2:5, 2011.", "title": "Configuration coverage in the analysis of large-scale system software", "context": [{"sec": "sec6a1b", "text": " [50] propose the statement-coverage sampling algorithm and applied a per-file analysis to detect bugs in the Linux kernel.", "part": "1"}], "links": {"acmLink": "https://doi.org/10.1145/2039239.2039242", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=Configuration+coverage+in+the+analysis+of+large-scale+system+software&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref50"}, {"order": "51", "text": "<em>Lincoln University of Nebraska. Combinatorial interaction testing (CIT) portal</em>,  [online]  Available: http://cse.unl.edu/-citportal/.", "title": "Lincoln University of Nebraska. Combinatorial interaction testing (CIT) portal", "context": [{"sec": "sec1", "text": "Combinatorial Interaction Testing (CIT) [51] has been popularized to balance probability of finding configuration errors (i.e., efficacy) and efficiency [17], [30], [31], [38], [42].", "part": "1"}], "googleScholarLink": "https://scholar.google.com/scholar?as_q=Lincoln+University+of+Nebraska.+Combinatorial+interaction+testing+%28CIT%29+portal&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref51"}, {"order": "52", "text": "Alan W. Williams, Robert L. Probert, \"A practical strategy for testing pair-wise coverage of network interfaces\", <em>Proceedings of the InternationalSymposium on Software Reliability Engineering</em>, pp. 246-254, 1996.", "title": "A practical strategy for testing pair-wise coverage of network interfaces", "context": [{"sec": "sec1", "text": " For example, pairwise testing adequacy [52] is obtained when the sample set of selected configurations covers all possible pairs of input options.", "part": "1"}, {"sec": "sec1", "text": " Overall, considering our experimental setup, results suggest that it is preferable to combine some heuristics that demand a relatively low number of test requirements (e.g., one-enabled and one-disabled [11]) than using heuristics that solicit more test requirements (e.g., pairwise [52]).", "part": "1"}, {"sec": "sec2b", "text": " Finally, \\$t\\$-wise [52] samples all combinations of \\$t\\$ configuration options.", "part": "1"}], "links": {"abstract": "Distributed systems consist of a number of network elements that interact with each other. As the number of network elements and interchangeable components for each network element increases, the trade-off that the system tester faces is the thoroughness of test configuration coverage vs. limited resources of time and expense that are available. An approach to resolving this trade-off is to determine a set of test configurations that test each pair-wise combination of network components. This go...", "pdfSize": "743KB", "openUrlImgLoc": "/assets/img/btn.find-in-library.png"}, "googleScholarLink": "https://scholar.google.com/scholar?as_q=A+practical+strategy+for+testing+pair-wise+coverage+of+network+interfaces&as_occt=title&hl=en&as_sdt=0%2C31", "refType": "biblio", "id": "ref52"}], "pdfLink": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7985700", "articleId": "7985700", "startPage": "632", "endPage": "642", "pubLink": "https://ieeexplore.ieee.org/xpl/conhome/7976701/proceeding", "issueLink": "https://ieeexplore.ieee.org/xpl/tocresult.jsp?isnumber=7985634", "publisher": "IEEE", "confLoc": "Buenos Aires, Argentina", "chronDate": "20-28 May 2017", "metrics": {"citationCountPaper": 1, "citationCountPatent": 0, "totalDownloads": 178}}
