"Document Title","Authors","Author Affiliations","Publication Title","Date Added To Xplore","Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN","ISBNs","DOI","Funding Information","PDF Link","Author Keywords","IEEE Terms","INSPEC Controlled Terms","INSPEC Non-Controlled Terms","Mesh_Terms","Article Citation Count","Reference Count","License","Online Date","Issue Date","Meeting Date","Publisher","Document Identifier"
"paper title","author1; author2","affiliation1; affiliation2","publication title","","2013","","","1","2","A long abstract of the article","","","xx.xxxx/xx.xxxx.xxxxxxxxx","","pdf link like https://xxxxxxx","keyword1; keyword2","term1; term2","term3; term4","term5; term6","term7; term8","5","3","","","","","IEEE","IEEE Conferences"
"Leveraging abstract interpretation for efficient dynamic symbolic execution","E. Alatawi; H. SâŠ˜ndergaard; T. Miller","School of Computing and Information Systems, The University of Melbourne, Victoria 3010, Australia; School of Computing and Information Systems, The University of Melbourne, Victoria 3010, Australia; School of Computing and Information Systems, The University of Melbourne, Victoria 3010, Australia","2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE)","","2017","","","619","624","Dynamic Symbolic Execution (DSE) is a technique to automatically generate test inputs by executing a program with concrete and symbolic values simultaneously. A key challenge in DSE is scalability; executing all feasible program paths is not possible, owing to the potentially exponential or infinite number of paths. Loops are a main source of path explosion, in particular where the number of iterations depends on a program's input. Problems arise because DSE maintains symbolic values that capture only the dependencies on symbolic inputs. This ignores control dependencies, including loop dependencies that depend indirectly on the inputs. We propose a method to increase the coverage achieved by DSE in the presence of input-data dependent loops and loop dependent branches. We combine DSE with abstract interpretation to find indirect control dependencies, including loop and branch indirect dependencies. Preliminary results show that this results in better coverage, within considerably less time compared to standard DSE.","","","10.1109/ASE.2017.8115672","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8115672","Dynamic symbolic execution;DSE;abstract interpretation;path explosion;test generation","Tools;Explosions;Concrete;Testing;Scalability","program control structures;program diagnostics;program testing;program verification","symbolic inputs;loop dependencies;input-data dependent loops;dependent branches;indirect control dependencies;branch indirect dependencies;standard DSE;efficient dynamic symbolic execution;test inputs;symbolic values;feasible program paths;path explosion","","2","21","","","","","IEEE","IEEE Conferences"
"Flow Permissions for Android","S. Holavanalli; D. Manuel; V. Nanjundaswamy; B. Rosenberg; F. Shen; S. Y. Ko; L. Ziarek","University at Buffalo, The State University of New York, USA; University at Buffalo, The State University of New York, USA; University at Buffalo, The State University of New York, USA; University at Buffalo, The State University of New York, USA; University at Buffalo, The State University of New York, USA; University at Buffalo, The State University of New York, USA; University at Buffalo, The State University of New York, USA","2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE)","","2013","","","652","657","This paper proposes Flow Permissions, an extension to the Android permission mechanism. Unlike the existing permission mechanism our permission mechanism contains semantic information based on information flows. Flow Permissions allow users to examine and grant explicit information flows within an application (e.g., a permission for reading the phone number and sending it over the network) as well as implicit information flows across multiple applications (e.g., a permission for reading the phone number and sending it to another application already installed on the user's phone). Our goal with Flow Permissions is to provide visibility into the holistic behavior of the applications installed on a user's phone. Our evaluation compares our approach to dynamic flow tracking techniques; our results with 600 popular applications and 1,200 malicious applications show that our approach is practical and effective in deriving Flow Permissions statically.","","","10.1109/ASE.2013.6693128","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6693128","","Smart phones;Seals;Androids;Humanoid robots;MySpace;Browsers;Java","Android (operating system)","flow permissions;Android permission mechanism;semantic information;information flows","","17","20","","","","","IEEE","IEEE Conferences"
"Natural language requirements quality analysis based on business domain models","K. M. Annervaz; V. Kaulgud; S. Sengupta; M. Savagaonkar","Accenture Technology Labs, Bangalore, India; Accenture Technology Labs, Bangalore, India; Accenture Technology Labs, Bangalore, India; Accenture Technology Labs, Bangalore, India","2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE)","","2013","","","676","681","Quality of requirements written in natural language has always been a critical concern in software engineering. Poorly written requirements lead to ambiguity and false interpretation in different phases of a software delivery project. Further, incomplete requirements lead to partial implementation of the desired system behavior. In this paper, we present a model for harvesting domain (functional or business) knowledge. Subsequently we present natural language processing and ontology based techniques for leveraging the model to analyze requirements quality and for requirements comprehension. The prototype also provides an advisory to business analysts so that the requirements can be aligned to the expected domain standard. The prototype developed is currently being used in practice, and the initial results are very encouraging.","","","10.1109/ASE.2013.6693132","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6693132","Requirements Engineering;Ontology;Natural Language Processing;Business Domain Modeling","Business;Ontologies;Natural languages;Analytical models;Portals;OWL;Standards","business data processing;natural language processing;ontologies (artificial intelligence);software engineering;systems analysis","natural language requirements quality analysis;business domain models;software engineering;software delivery project;domain knowledge;natural language processing;ontology based techniques;requirements comprehension;business analysts;domain standard","","3","21","","","","","IEEE","IEEE Conferences"